<html>
  <head>
    <title>Classes and namespaces</title>
    <link rel="stylesheet" href="for-screen.css">
    <meta name="generator" content="h-smile:richtext">
  </head>
<body>
  <h1>Classes and namespaces</h1>
  <p>The keyword <strong>namespace</strong> is used to declare new namespaces. A namespace is a collection of functions, classes, variables, etc. aggregated in a single unit. Namespaces can also contain other (inner) namespaces. Under the hood, a namespace is just a named global object. The keyword <em>super</em> can be used to access members of the parent namespace that have the same name as those in the inner namespace.</p>
  <p>Declaration of a namespace:</p>
  <pre class="code tiscript"><b>namespace</b> &lt;name&gt;
<code>{
</code>  [ &lt;function&gt; | &lt;var&gt; | &lt;const&gt; | &lt;class&gt; | &lt;namespace&gt; ]*
<code>}
</code></pre>
  <h1><a name="classes" id="classes">Classes</a></h1>
  <p>The keyword <strong>class</strong> is used to define new classes (types of objects):</p>
  <pre class="code tiscript"><b>class</b> &lt;class-name&gt; [ ( <b>:</b> | <b>extends</b> ) &lt;parent-class name&gt; ]
{
  [ &lt;function&gt; | &lt;constructor&gt; | &lt;property&gt; | &lt;var&gt; | &lt;const&gt; | &lt;this var&gt; | &lt;class&gt; ]*
}
</pre>
  <dl>
    <dt>Where:</dt>
    </dl><ul><li><code>&lt;function&gt;</code> is a standard function declaration. Such functions can be used as instance or static methods of the class.<br>ES2015 compatibility: Member functions can be declared without <code>function</code> keyword.</li>
		<li><code>&lt;constructor&gt;</code> is a function with predefined name <em>this</em> or <i>constructor</i> (ES2015 compatibility) .</li>
		<li><code>&lt;property&gt;</code> is a special type of member function. See more details below.</li>
		<li><code>&lt;var&gt;</code> is a standard var declaration - allows to define class or module variables (a.k.a. static variables)</li>
		<li><code>&lt;const&gt;</code> is a declaration of named constant.</li>
		<li><code>&lt;class&gt;</code> is a declaration of inner class.</li>
		<li><code>&lt;this var&gt;</code> is a declaration of member variable[s]:<pre>   <b>this var</b> &lt;name&gt; [= &lt;value&gt;] [, &lt;name&gt; = &lt;value&gt; , ...]; </pre></li></ul>
  <h2><a name="constructors" id="constructors">Constructors</a></h2>
  <p>The function with the name <em>this</em>, declared in the context of a class, serves the role of the function-constructor for all instances of the class:</p>
  <pre class="code tiscript"> <b>class</b> Tor
{
  <b>this var</b> one = 1; // declaration of member variable

  <b>function</b> <b>this</b>() { this.two = 2; } // constructor
  // or (ES2015 compatibility) as
  <b>constructor</b>() { this.two = 2; } // constructor declaration, <i>function</i> omitted
}<code>
</code></pre>
  <p>The main goal of the constructor is to initialize new instances of the class (a.k.a. objects) by creating and initializing all the fields that the instance shall contain. The object that is being created is accessible through the variable named <em>this</em> inside the constructor <sup><a href="#fn__1" name="fnt__1" id="fnt__1" class="fn_top">1)</a></sup>.</p>
  <p>The compiler invokes the constructor when it handles the new operator:</p>
  <pre class="code tiscript"><b>var</b> tor = new Tor();
//  tor.one == 1 and
//  tor.two == 2 at this point<code>
</code></pre>
  <p>In any other aspect, <code>function this()</code> is an ordinary function that may have any number of parameters defined, including the <a href="/wiki/tiscript/functions#optional_parameters" class="wikilink1" title="tiscript:functions">optional parameters</a>.</p>
  <h2><a name="methods" id="methods">Methods</a></h2>
  <p>A function with any other name, declared in the context of a class, is known as a method of that class. If a method has a reference to the <em>this</em> variable, it is called an <em><strong>instance method</strong></em> (a.k.a. <em>dynamic</em>). If it does not refer to the <em>this</em> variable, it is a <em><strong>class method</strong></em> (a.k.a. <em>static</em>). In principle, the same function can be used as both, an instance and a class method. When invoked as a <em>class method</em>,<em> this</em> will have a reference to the class or namespace where the method is defined. When invoked as an instance method ( e.g. <em>obj.method()</em> ) <em>this</em> will be equal to the object instance (<em>obj</em> in this case).</p>
	<p>For the compatibility with ES2015 (a.k.a. JavaScript 6) <code>function</code> keyword can be omitted from function declarations.</p>
  <h3><a name="instance-methods" id="instance-methods">Instance Methods</a></h3>
  <p>Instance methods must be called in the context of particular object of the class:</p>
  <pre class="code tiscript"><b>class</b> Tor
{
  <b>function</b> rotate( angle ) {  this.angle = angle; this.update(); }
<b>  function</b> update() { ... }
}
<b>var</b> tor = <b>new</b> Tor();
tor.rotate(270);     // Tor.rotate() method called in the context
                     // of a particular instance - 'tor'<code>
</code></pre>
  <p>Or in ES2015 style:</p>
	<pre><b>class</b> Tor
{
  <b>rotate</b>( angle ) {  this.angle = angle; this.update(); }
  <b>update</b>() { ... }  
}
<b>var</b> tor = <b>new</b> Tor();
tor.rotate(270);     // Tor.rotate() method called in the context
                     // of a particular instance - 'tor'</pre><h3><a name="static-methods" id="static-methods">Static Methods</a></h3>
  <p>Static method of a class or namespace can be called by using the <em>ClassOrNamespace.Method</em> notation (a.k.a. the &quot;dot notation&quot;):</p>
  <pre class="code tiscript"><b>class</b> Tor
{
  <b>var</b> all = [];
  <b>function</b> rotateAll( angle ) {  for(var t in Tor.all) t.rotate(angle);  }
}
Tor.rotateAll(270); // Tor.rotateAll() method called as a class method<code>
</code></pre>
  <h2><a name="properties" id="properties">Properties</a></h2>
  <p>Sciter script supports definitions of computable (a.k.a. virtual) properties. These are special functions that are executed to set or get the value of a property. The syntax of a computable property definition:</p>
  <pre class="code tiscript"><b>property</b> &lt;function-name&gt; ( &lt;parameter&gt; )<code>
</code>{
  [ &lt;statement&gt; | <b>get</b> &lt;statement&gt; | <b>set</b> &lt;statement&gt; ]*
}
</pre>
  
	<p>Alternative form introduced for ES2015 compatibility are <i>get/set member functions</i>:</p>
	<pre><b>get</b> &lt;property-name&gt; ( )
{
  [ &lt;statement&gt; ]*
}
<b>set</b> &lt;property-name&gt; ( val )
{
  [ &lt;statement&gt; ]*  
}</pre><p>The body of the <code>property</code> function can contain statements that may appear in a normal function body and also the special <em>get</em> and <em>set</em> sections. The <em>get</em> section (one or more) is executed conditionally when the function is invoked for getting &nbsp;the property value, and the <em>set</em> section for setting the property value. Example:</p>
  <pre class="code tiscript"><b>class</b> Baz
{
  <b>function</b> <b>this</b>() { this._first = 1; this._second = 2; }

  <b>property</b> first( val )
  {
    <b>get</b> <b>return</b> this._first; // single expression get block
    <b>set</b> this._first = val;  // single expression set block
  }

  <b>property</b> second( val )
  {
    stdout &lt;&lt; &quot;second&quot;;
    <b>get</b>
    {
      return this._second + 2;
    }
    <b>set</b>
    {
      this._second = val - 2;
    }
  }
}<code>
</code></pre>
  <div>Note that the property function declaration must have a single parameter defined, e.g. <code>val</code>.</div>
  <p>ES2015 compatible alternative declaration of the above:</p>
	<pre><b>class</b> Baz
{
  <b>constructor</b>() { this._first = 1; this._second = 2; }

  // single expression get/set functions
  <b>get</b> first() return this._first;
  <b>set</b> first(val) this._first = val;

  <b>get</b> second()
  {
    stdout &lt;&lt; &quot;second&quot;;
    <b>return</b> this._second + 2;
  }
  <b>set</b> second(val)
  {
    stdout &lt;&lt; &quot;second&quot;;
    this._second = val - 2;
  }
}</pre><h3>Undefined Property Handler</h3>
  <p>It is possible to define a so-called <em>Undefined Property Handler</em>, which deals with undefined properties. The syntax of the <em>UPH</em> is similar to the computable property handler, except for the <em>undefined</em> name token used in its name:</p>
  <pre class="code tiscript"><b>property</b> <b>undefined</b> ( &lt;name&gt;, &lt;value&gt; )
<code>{
</code>  [&lt;statement&gt; | <b>get</b> &lt;statement&gt; | <b>set</b> &lt;statement&gt; ]*
<code>}</code><code>
</code></pre>
  <p>The UPH function must have precisely two parameters: the <em>name</em> of the property, and its <em>value</em> (used in the property set operation). UPH's can be used in cases where the set of properties is unknown upfront. For example, you may wish to access the fields of a recordset as properties:</p>
  <pre class="code tiscript"><b>property</b> Recordset.undefined(name, val)
{
  <b>get</b> return this.getFieldValue(name);
}
...

<b>var</b> rs = DB.exec(&quot;SELECT firstName, secondName FROM employee&quot;);
<b>var</b> n1 = rs.firstName;  // redirect to rs.getFieldValue(#firstName); call
<b>var</b> n2 = rs.secondName; // through property undefined()<code>
</code></pre>
  <h2><a name="type-variables" id="type-variables">Class/Namespace variables</a></h2>
  <p>Class, or namespace, variables are defined in the context of a class or namespace by using the <em>var</em> keyword. Example:</p>
  <pre class="code tiscript"><b>namespace</b> Toz
{
  <b>var</b> all = []; // create variable that contains empty array;
  <b>var</b> singleton = { something: 123; }; // create variable
                                       // that contains object;
  <b>var</b> counter = 0; // create variable that contains integer zero;
}<code>
</code></pre>
  <p>To access such variables, use their fully qualified names:</p>
  <pre class="code tiscript">Toz.all.push(&quot;anything&quot;);
Toz.counter += 1;<code>
</code></pre>
  <h2>Instance variables</h2>
  
	<p>Classes may have so called instance variables defined upfront. Instance variable is unique to each instance of the class - not shared with other instances.</p><p>Instance variables are defined in context of a class by using <em>this var</em> keyword combination. Example:</p>
	
	<pre><b>class</b> Recordset {
  <b>this var</b> currentRecord = []; // note: these are
  <b>this var</b> dbCursor = null;    // instance variables
  
  <b>function</b> next() { this.currentRecord = DB.advanceNext(this.dbCursor); }
}</pre>
	
	<h2><a name="constants" id="constants">Constants</a></h2>
  <p>Namespace constants (a.k.a. constants) are read-only variables, defined in the context of a type by using the <code>const</code> keyword. Example:</p>
  <pre class="code tiscript"><b>namespace</b> Toz
{
  <b>const</b> ALIGN_LEFT = 1;
  <b>const</b> ALIGN_CENTER = 2;
  <b>const</b> ALIGN_RIGHT = 3;
}<code>
</code></pre>
  <p>To access such constants outside of class or namespace functions, use their fully qualified names using dot notation:</p>
  <pre class="code tiscript"><b>switch</b>(alignment)
{
  <b>case</b> Toz.ALIGN_LEFT: ... <b>break</b>;
  <b>case</b> Toz.ALIGN_CENTER: ... <b>break</b>;
  <b>case</b> Toz.ALIGN_RIGHT: ... <b>break</b>;
  default: ... <b>break</b>;
}<code>
</code></pre>
  
	<p>Inside classes and namespaces constants can be used directly without dot notation.</p><p><sup><a href="#fnt__1" id="fn__1" name="fn__1">1)</a></sup> The idea for using <em>this</em> for a constructor name was borrowed from the <a href="http://digitalmars.com/d/class.html#constructors" class="urlextern" title="http://digitalmars.com/d/class.html#constructors" rel="nofollow">D language</a></p>
  </body>
</html>