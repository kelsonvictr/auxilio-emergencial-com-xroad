
include "sciter:reactor.tis";


class Tape : Reactor.Component 
{
  const styleset = [tape: $url(tape.css)];

  this var dataSource;
  this var itemView;
  this var isKinetic;
  this var atEnd;
  this var scrollbar;

  function this(props) {
    //set these:
    //  tape.dataSource;
    //  tape.itemView;
    //  tape.isKinetic;
    //  tape.atEnd;
    this.extend(props);
  }

  function render() {
    var content = this.renderContent();
    var atts = this.atEnd ? {atend:true} : {};
    return <tape><items @{this.arena} {atts} >{content}</items><scrollbar @{this.scrollbar}/></tape>;
  }

  function update(props = null) {
    if( props ) {
      this.extend(props);
      if(props.dataSource || props.itemView)
        this.resetList();
    } 
    else super.update();
  }

  function renderContent() { return []; }

  function attached()  // installs scroll engine on this
                       // will add this.resetList() method
  {
    const BUFFER_SIZE = 20;      // this is a max number of items in buffer
                                 // this number has to be at least twice bigger than number of visible items.
    const BUFFER_CHUNK_SIZE = 10;// this is a number of items that will be fetched from items source on scroll to fill the buffer.
    const SCROLL_DELTA = 60;     // dip, for mouse wheel, non-kinetic
    
    const SCROLL_KINETIC_DELTA = 20;       // dip, for mouse wheel, kinetic
    const SCROLL_KINETIC_DECEL = 0.86;     // deceleration 
    const SCROLL_KINETIC_OUT_DECEL = 0.74; // deceleration when head/tail reached, a.k.a overscroll
    const SCROLL_KINETIC_STEP_DELAY =  View.ANIMATION_TIMER_SPAN; // milliseconds

    const SB_THUMB_SIZE = 16dip;

    // pre render it
    this.merge(this.render(),#only-children);

    const tape = this;
    var   arena = this.arena; assert(arena);
    var   scrollbar = this.scrollbar;

    const elementUpdate = Element.update; // original Element.update()  

    var velocity = 0;

    var scrollDown;
    var scrollUp;

    var touchPosX;
    var touchPosY;
    var isOut = false;
    var stopAnimation;

    var itemsBuffer = [];

    function isItemVisible(item,height) {
      var (x1,y1,x2,y2) = item.box(#rect,#border,#parent);
      if( y2 < 0 ) return false;
      if( y1 > height ) return false;
      return true;
    }

    var firstVisible, lastVisible;

    function scrollbarSetup(height) {
      const nVisible = lastVisible - firstVisible + 1;
      const nTotal = tape.dataSource.totalItems;
      const thumbHeight = height * nVisible / nTotal; 
      const th = Integer.max(arena.toPixels(SB_THUMB_SIZE),thumbHeight);
      const ty = (height - th) * firstVisible / nTotal; 
      //debug scroll:th, (height - th), firstVisible, nTotal,ty;      
      scrollbar.style.set { 
        padding-top: px(ty),
        height:px(th)
      };
    }

    function scrollTo(x,y,animate) {

      var (scroll_left,scroll_top, scroll_right, scroll_bottom) = arena.scroll(#rect);
      if( scroll_top <= 0 && scroll_bottom <= 0) {
        arena.scrollTo(0,0,false,false);
        return;
      }
      arena.scrollTo(x,y,false,animate);
      if(!scrollbar) return;
      var height = arena.box(#height);
      var first = null, last = null;
      for(var item in arena) {
        if( !isItemVisible(item,height) ) {
          if( last !== null) break;
          continue;
        }
        const recordIndex = item.attributes["index"].toInteger();
        if( first === null ) first = recordIndex;
        last = recordIndex;
      }

      if( first != firstVisible || last != lastVisible ) {
        firstVisible = first;
        lastVisible = last;
        scrollbarSetup(height);
      }
    }

    function scrollStepDown(scrollDelta, noOverflow = false)
    {
      var (scroll_left,scroll_top, scroll_right, scroll_bottom) = arena.scroll(#rect);
      var content_height = arena.box(#height,#content);
      
      function fetchMore()
      {
        var key = itemsBuffer.last.key;
        var chunk = tape.dataSource(key,BUFFER_CHUNK_SIZE);
        if(chunk.length == 0) 
          return true; // nothing was inserted - no more records. true - to mark end reached
        itemsBuffer.push(...chunk);

        var vnodes = itemsBuffer.map( (item) => tape.itemView.call(tape,item) );
        arena.merge(<content>{vnodes}</content>,#only-children);
        elementUpdate.call(tape);

        content_height = arena.box(#height,#content);
        
        // drop first items that exceed BUFFER_SIZE
        vnodes.splice(0,itemsBuffer.length - BUFFER_SIZE);        
        itemsBuffer.splice(0,itemsBuffer.length - BUFFER_SIZE);
        arena.merge(<content>{vnodes}</content>,#only-children);
        elementUpdate.call(tape);
        
        var content_height_after = arena.box(#height,#content); // adjust scroll position as
        scroll_top += content_height_after - content_height;   // we've removed first items.
        content_height = content_height_after;
        tape.postEvent("buffer-change", [itemsBuffer.first.key,itemsBuffer.last.key]);
        return false;
      }
      
      var scrolly = scroll_top + scrollDelta;
      
      if( scroll_bottom < scrollDelta) {
        // we need to pump more items in this virtual list:
        isOut = fetchMore();
        if(isOut && noOverflow) { 
          scrolly = content_height - arena.scroll(#height);
          isOut = false;
        }
        else 
          scrolly = scroll_top + scrollDelta;
      }
      else   
        isOut = false;

      scrollTo( scroll_left, scrolly, true );
    }
      
    function scrollStepUp(scrollDelta, noOverflow = false)
    {
      var (scroll_left,scroll_top, scroll_right, scroll_bottom) = arena.scroll(#rect);
         
      function fetchMore()
      {
        var prev_top = arena.first.box(#top,#inner,#parent);
        var key = itemsBuffer.first.key;
        var chunk = tape.dataSource(key,-BUFFER_CHUNK_SIZE);
        if(chunk.length == 0) 
          return true; // nothing was inserted - no more records. true - to mark end reached
        itemsBuffer.unshift(...chunk); 
        if(itemsBuffer.length > BUFFER_SIZE)
          itemsBuffer.length = BUFFER_SIZE; // prune the buffer
        var vnodes = itemsBuffer.map( (item) => tape.itemView.call(tape,item) );
        arena.merge(<content>{vnodes}</content>,#only-children);
        elementUpdate.call(tape);
        var new_top = arena[chunk.length].box(#top,#inner,#parent);
        scroll_top = new_top - prev_top; // adjust scroll position.
        tape.postEvent("buffer-change", [itemsBuffer.first.key,itemsBuffer.last.key]);
        return false;
      }

      var scrolly = scroll_top - scrollDelta;
    
      if( scrolly < 0 )
      {
        // we need to pump more items in this virtual list:      
        isOut = fetchMore();
        if(isOut && noOverflow) {
          scrolly = 0;
          isOut = false;
        }
        else 
          scrolly = scroll_top - scrollDelta;
      } 
      else
        isOut = false;
      scrollTo( scroll_left, scrolly, true );
    }

    function navigateTo(itemNo) {
      var (scroll_left,scroll_top, scroll_right, scroll_bottom) = arena.scroll(#rect);
      var atEnd = false;
      if( itemNo > tape.dataSource.totalItems - BUFFER_SIZE ) {
        itemsBuffer = tape.dataSource(null,-BUFFER_SIZE);
        atEnd = true;
      }
      else 
        itemsBuffer = tape.dataSource(itemNo,BUFFER_SIZE);
      var vnodes = itemsBuffer.map( (item) => tape.itemView.call(tape,item) );
      arena.merge(<content>{vnodes}</content>,#only-children);
      elementUpdate.call(tape);
      scroll_top = atEnd ? 10000 : 0;
      scrollTo( scroll_left, scroll_top, false );
      tape.postEvent("buffer-change", [itemsBuffer.first.key,itemsBuffer.last.key]);
    }
    
    function scrollEnded()
    {
      function animateBackTop(distance) 
      {
        var scroll_y = arena.scroll(#top);
        var target_y = 0;
        var target_y_half = scroll_y / 2;
        var v = 1;
        arena.animate(
         :{
            scroll_y += v;
            if( scroll_y >= target_y ) { scrollTo( 0, target_y, true ); isOut = false; return 0; }
            scrollTo( 0, scroll_y, true );
            if( scroll_y < target_y_half ) ++v;  
            else if(--v == 0) v = 1;
            return SCROLL_KINETIC_STEP_DELAY;
          });
      }
      function animateBackBottom(distance) 
      {
        var scroll_y = arena.scroll(#top);
        var target_y = scroll_y - distance;
        var target_y_half = scroll_y - distance / 2;
        var v = 1;
        arena.animate(
         :{
            scroll_y -= v;
            if( scroll_y <= target_y ) { scrollTo( 0, target_y, true ); isOut = false; return 0; }
            scrollTo( 0, scroll_y, true );
            if( scroll_y > target_y_half ) ++v;  
            else  if( --v == 0 ) v = 1;
            return SCROLL_KINETIC_STEP_DELAY;
          });
      }
    
      var firstTop = arena.first.box(#top,#margin,#parent);
      var lastBottom = arena.last.box(#bottom,#margin,#parent);
      var height = arena.box(#height,#inner);
      if( firstTop > 0 )
        animateBackTop(firstTop);
      else if( lastBottom < height )
        animateBackBottom(height - lastBottom );
    }
    
    function doScrollAnimation()
    {
      if( arena.state.animating ) return;
      function animationStep()
      {
        velocity *= isOut ? SCROLL_KINETIC_OUT_DECEL : SCROLL_KINETIC_DECEL;
        if( Math.abs(velocity) < 0.5 || stopAnimation) 
        {
          tape.post(scrollEnded);
          return 0;
        }
        var v = velocity.toInteger();
        if( v < 0 ) scrollStepUp(-v); else scrollStepDown(v);
        return SCROLL_KINETIC_STEP_DELAY;
      }
      arena.animate(animationStep);
    }

    function scrollDownNormal(scrollDelta = SCROLL_DELTA) { 
      return scrollStepDown(scrollDelta * arena.toPixels(1dip,#height), true); 
    }
    function scrollUpNormal(scrollDelta = SCROLL_DELTA)   { 
      return scrollStepUp(scrollDelta * arena.toPixels(1dip,#height), true); 
    }
    
    function scrollDownKinetic(scrollDelta = SCROLL_KINETIC_DELTA)
    {
      var v = (velocity || 0.0);
      velocity = v + scrollDelta * arena.toPixels(1dip,#height);
      doScrollAnimation();
    }

    function scrollUpKinetic(scrollDelta = SCROLL_KINETIC_DELTA)
    {
      var v = (velocity || 0.0);
      velocity = v - scrollDelta * arena.toPixels(1dip,#height);
      doScrollAnimation();
    }

    arena << event mousewheel (evt)
    {
      if( !isOut ) {
        if(evt.wheelDelta < 0 ) 
          scrollDown();
        else
          scrollUp();
      }
      return true;
    }

    arena << event mousedown (evt) {
      if( evt.mainButton ) {
        touchPosX = evt.x;
        touchPosY = evt.y;
      }
    }

    arena << event mousemove (evt) {
      if( evt.mainButton ) {
        var delta = evt.y - touchPosY;
        touchPosX = evt.x;
        touchPosY = evt.y;
        delta < 0 ? scrollStepDown(-delta) : scrollStepUp(delta);
      }
    }

    //scrollbar << event mouseenter(evt) { }

    scrollbar << event mousedown(evt) { 
      var (x1,y1,x2,y2) = scrollbar.box(#rect);

      if( evt.y > y1 && evt.y < y2 ) { // click on scrollbar thumb
        var off = evt.y - y1;
        var height = scrollbar.box(#height,#padding);
        const handler = event mousemove(evt) {
          var ptop = scrollbar.box(#top,#padding,#inner);
          ptop += evt.y - off;
          const itemNo = Integer.max(0,tape.dataSource.totalItems * ptop / height);
          navigateTo(itemNo);
          view.update(true);
        };
        scrollbar << handler; 
        scrollbar.capture(#strict);
        view.doEvent(#untilMouseUp);
        scrollbar.capture(false);
        scrollbar >> handler;
      }
    }

    tape.dataSource.onNewItem = function(index) {
      navigateTo(index);
    }

    function initList() {
      if(tape.isKinetic) { scrollDown = scrollDownKinetic; scrollUp = scrollUpKinetic; }
      else               { scrollDown = scrollDownNormal;  scrollUp = scrollUpNormal; }
      // initial list setup:
      if(tape.atEnd) {
        itemsBuffer = tape.dataSource(null, -BUFFER_SIZE);
        tape.post(function() {
          elementUpdate.call(tape);
          scrollTo( 0, 10000, false );
        });
      }
      else {
        itemsBuffer = tape.dataSource(null, BUFFER_SIZE);
        //scrollTo( 0, 0, false );
        tape.post(function() {
          scrollTo( 0, 0, false );
        });        
      }
      var vnodes = itemsBuffer.map( (item) => tape.itemView.call(tape,item) );
      arena.merge(<content>{vnodes}</content>,#only-children);
      isOut = false;
    }
    
    tape.resetList = initList;
    tape.renderContent = function () {
      //var key = itemsBuffer.last.key;
      //var chunk = tape.dataSource(key,BUFFER_SIZE);
      return itemsBuffer.map( (item) => tape.itemView.call(tape,item) );
    }

    initList();

  }

  function detached() {
    // unsubscribe
    this.itemSource.onNewItem = null; 
  }


}