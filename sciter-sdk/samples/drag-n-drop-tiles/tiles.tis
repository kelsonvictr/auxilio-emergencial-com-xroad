
class Tiles : Element 
{

  this var cells = [[null]];
  this var cellsize = 10; // will be calculated by updateLayout(), in pixels 
  this var cellspacing = 0;
  this var placeholder = null; // { isPlaceholder:true, tile:{} }

  function attached() {
    for(var el in this)
    {
      var r = el.attributes["row"].toInteger();
      var rs = (el.attributes["rows"] || 1).toInteger();
      var c = el.attributes["col"].toInteger();
      var cs = (el.attributes["cols"] || 1).toInteger();
      this.setCellAt(el,{row:r,col:c,rows:rs,cols:cs});
    }
    this.updateLayout();
  }

  function cellAt(row,col,onlyOrigin = false) { 
    if( row < 0 || col < 0 ) return null;
    if( row >= this.nrows || col >= this.ncols ) return null;
    return this.cells[row][col]; 
  }

  function colRange(tile) { var c1 = tile.col; var c2 = c1 + tile.cols - 1; return (c1,c2); }
  function rowRange(tile) { var r1 = tile.row; var r2 = r1 + tile.rows - 1; return (r1,r2); }

  function setCellAt(cell,tile) 
  { 
    var tcols = tile.col + tile.cols; 
    if( tcols > this.ncols ) for( var r in this.cells ) r.length = tcols;
    var trows = tile.row + tile.rows; 
    if( trows > this.nrows ) for( var n in (trows - this.nrows)) this.cells.push( new Array(this.ncols) );
    var (r1,r2) = rowRange(tile);
    var (c1,c2) = colRange(tile);
    for( var r = r1; r <= r2; ++r ) 
      for( var c = c1; c <= c2; ++c )
        this.cells[r][c] = cell;
    if(cell) cell.tile = tile;
  }

  function injectCellAt(cell,tile) { 

    const shiftTile = (tile,dr,cell) => {
      var newpos = { col:tile.col, row: tile.row + dr, rows: tile.rows, cols: tile.cols };
      var (r1,r2) = rowRange(newpos);
      var (c1,c2) = colRange(newpos);

      if(cell && cell.tile)
        this.setCellAt(null,cell.tile);        

      for( var r = r1; r <= r2; ++r )
        for( var c = c1; c <= c2; ++c ) {
          var tc = this.cellAt(r,c);
          if( !tc ) continue;
          if( tc === cell) continue;
          tc.tile = shiftTile(tc.tile, r2 - tc.tile.row + 1,tc);
        }

      this.setCellAt(cell,newpos);
      return newpos;
    };
    return shiftTile(tile,0,cell);
  }

  function pack() { // removes empty columns and rows 
    const at = (r,c) => { // cellAt but only origin
      var cell = this.cells[r][c];
      return cell && cell.tile.col == c && cell.tile.row == r ? cell : null; 
    };
    
    const spaceRowsAbove = (cell) => {
      var nrows = 0;
      var (c1,c2) = colRange(cell.tile);      
      for( var r = cell.tile.row - 1; r >= 0; --r ) {
        for(var c = c1; c <= c2; ++c) 
          if( this.cellAt(r,c) ) return nrows;
        ++nrows;
      }
      return nrows;
    };

    for( var r in this.nrows )
      for( var c in this.ncols )
        if(var cell = at(r,c)) {
          if(var above = spaceRowsAbove(cell)) { //move up cell above rows
             var tile = cell.tile;
             this.setCellAt(null,tile);
             this.setCellAt(cell, { row: tile.row - above, col:tile.col, rows:tile.rows, cols:tile.cols});
           } 
        }
  }

  property ncols(v) { get return this.cells[0].length; }
  property nrows(v) { get return this.cells.length; }

  function updateLayout() {
    const size = this.style.variable("cell-size") || 64dip;
    const spacing = this.style["border-spacing"] || 2dip;
    var nrows = this.nrows; var ncols = this.ncols;
    for( var r in nrows ) 
      for( var c in ncols ) {
        var cell = this.cellAt(r,c);
        if( !cell || cell !instanceof Element) continue;
        var {col,cols,row,rows} = cell.tile;
        if(row == r && col == c )
          cell.style.set { margin-left : col * size + col * spacing,
                           margin-top  : row * size + row * spacing,
                           width       : cols * size + (cols-1) * spacing,  
                           height      : rows * size + (rows-1) * spacing }
      }
    this.cellsize = this.toPixels(size);
    this.cellspacing = this.toPixels(spacing);
  }

  function paintBackground(gfx) {
    if( var ph = this.placeholder ) {
      var tile = ph.tile;
      var s = this.cellsize + this.cellspacing;
      var x = tile.col * s; var w = tile.cols * s - this.cellspacing;
      var y = tile.row * s; var h = tile.rows * s - this.cellspacing;
      const sw = this.toPixels(2dip);
      gfx.strokeColor(color(200,200,200))
         .strokeWidth(sw)
         .strokeDash(#dotted)
         .rectangle(x + sw/2,y + sw/2,w-sw,h-sw);
    }
  }

  event mousedragrequest $(div) (evt,cell) { 
    this.doDrag(cell,evt); 
    return true; 
  }

  function doDrag(cell,evt) 
  {
    var cx = evt.x; var cy = evt.y;
    
    var (xoff,yoff) = cell.box(#position,#inner,#parent);
    xoff = cx - xoff; yoff = cy - yoff;

    const findInsertPosition = (x,y) => 
    {
      var s = this.cellsize + this.cellspacing;
      var r = y / s; var c = x / s;
      if( r > this.nrows ) r = this.nrows;
      if( c > this.ncols ) c = this.ncols;
      return (r,c);
    }

    const checkPosition = () => {
      var (r,c) = findInsertPosition(cx,cy);
      if( r === null ) return;
      if( this.placeholder ) { 
        if( r == this.placeholder.tile.row && c == this.placeholder.tile.col ) return true;
        this.setCellAt(null,this.placeholder.tile);
      }
      this.placeholder = { isPlaceholder: true };
      this.injectCellAt(this.placeholder,{ row:r, col:c, rows:cell.tile.rows, cols:cell.tile.cols });
      this.pack();
      this.updateLayout();
      return false;
    };

    function mousemove(evt) {
      cell.style.set { margin-left : px(evt.x - xoff),
                       margin-top  : px(evt.y - yoff) };
      cx = evt.x; cy = evt.y;
      this.timer(40ms, checkPosition); // throttling position check
      view.update(true);
      return true;
    }

    var cancelMove = false;
    cell.state.dragsource = true;
    this.placeholder = { isPlaceholder: true, tile: cell.tile };
   
    this.capture(#strict);
    this.on("mousemove",mousemove);
    if(!view.doEvent(#untilMouseUp))
      cancelMove = true;
    this.off(mousemove);
    this.capture(false);
    this.timer(0,checkPosition);
    if(this.placeholder) {
      this.setCellAt(cell,this.placeholder.tile);
      this.placeholder = null;
    }
    cell.state.dragsource = false;
    this.updateLayout();
  }

}