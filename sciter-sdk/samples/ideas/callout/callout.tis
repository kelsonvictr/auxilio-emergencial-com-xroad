
const CALLOUT_OFFSET_X = 16; //px
const CALLOUT_OFFSET_Y = 20; //px

// global callout map
const callout = function() // creates or gets common callout element
  {
    var elements = {};
    return function(calloutType) 
    {
      var callout = elements[calloutType];
      if( callout ) return callout;

      callout = new Element("popup");
      callout.attributes["class"] = "callout " + calloutType;
      self.$(head).append(callout);
      elements[calloutType] = callout;
      return callout;
    }
  }();

class SliderCallout: Element
{
  function attached()
  {
    this.callout = callout("slider");
    this.slider = this.$(button);
  }
  event ~mouseup(evt)
  {
    if( !evt.mainButton || !this.callout )
      return;
    this.callout.move(); // re-move the callout
  }
  event change(evt)
  {
    var (x,y,w,h) = this.slider.box(#rectw,#border,#view);
    x += w/2;
    y += h;
    this.callout.value = this.value.toString();
    var hueAngle = this.value * 120 / 100; // 0 - red, 60 - yellow, 120 - green;
    this.callout.style["background-image-transformation"] = [hue:hueAngle];
    x -= CALLOUT_OFFSET_X;
    y += CALLOUT_OFFSET_Y;
    this.callout.move(x, y,#view);
  }
}

function ShowCallout( forElement, message, timeout = 1000 )
{
  var (x,y,w,h) = forElement.box(#rectw,#border,#view);
  var balloon = callout("message");
  balloon.value = message.toString();
  y += h;
  y += CALLOUT_OFFSET_Y;
  balloon.move(x, y,#view); 
  forElement.timer(timeout,::balloon.move());
}

function ValidationCallout( params )
{
  //forElement, message, timeout = 1000
  const min = this.attributes["min"].toNumber();
  const max = this.attributes["max"].toNumber();
  const delay = params.delay || 400ms;
  const shown = params.shown || 3s;
  
  var msg;

  function show() {
    if( !msg ) return;
    var (x,y,w,h) = this.box(#rectw,#border,#view);
    var balloon = callout("validation");
    balloon.value = msg;
    y += h;
    y += CALLOUT_OFFSET_Y;
    balloon.move(x, y,#view); 
    this.timer(shown,::balloon.move());
  }
    
  this << event change {
    if( this.value < min ) {
      msg = (params.isless || "<") + " " + min.toString() + "!";
      this.timer(delay,show);
    }
    else if( this.value > max ) {
      msg = (params.isgreater || ">") + " " + max.toString() + "!";
      this.timer(delay,show);
    } else 
      msg = null;
  }
 
  
}



