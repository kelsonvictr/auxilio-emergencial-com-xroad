include "activators/activators.tis";

function EditingToolbar(noteview,toolbar) 
{
  var observers = [];  

  const AVAILABLE = 0;
  const ACTIVE = 0x01;
  const DISABLED = 0x02;

  function doNotifyObservers() {
    for(var func in observers) 
      func();   
  }

  function notifyObservers() {
    // throttling notification that may do many updates
    if( toolbar.isVisible )
      toolbar.timer(100ms, doNotifyObservers);
  }
  
  function showInsertPictureDialog() {
    const filter = "Image Files|*.png;*.jpg;*.jpeg;*.gif;*.svg|All Files|*.*";
    const defaultExt = "png";
    const initialPath = System.path(#USER_DOCUMENTS,"/");
    const caption = "Select picture to insert";
    var fn = view.selectFile(#open-multiple, filter, defaultExt, initialPath, caption );
    return fn;
  }


  // binds UI thing (e.g. toolbar button) with command|function to be executed on click
  function bind(selector, cmd, param = undefined) 
  {
    var uiel = toolbar.select(selector); assert uiel : "no " + selector;
    if(typeof cmd == #function) {
      uiel << event click { cmd.call(noteview.htmlarea,#exec,param,uiel); noteview.htmlarea.state.focus = true; }
      observers.push( function() {
        if(!noteview.htmlarea) { uiel.state.disabled = true; }
        else {
          var cmdState = cmd.call(noteview.htmlarea,#query,param,uiel) || 0;
          uiel.state.checked  = (cmdState & ACTIVE) != 0;
          uiel.state.disabled = (cmdState & DISABLED) != 0;
        }
      });
    } else if(typeof cmd == #string) {
      uiel << event click { noteview.htmlarea.execCommand(cmd,param); noteview.htmlarea.state.focus = true; }
      observers.push( function() {//////
        if(!noteview.htmlarea) { uiel.state.disabled = true; }
        else {
          var cmdState = noteview.htmlarea.queryCommand(cmd,param) || 0;
          uiel.state.checked  = (cmdState & ACTIVE) != 0;
          uiel.state.disabled = (cmdState & DISABLED) != 0;
        }
      });
    } else 
      assert false: "Bad cmd type";
  }

  bind("button.span li.remove",     "format:remove-span:*");    
  bind("button.span li.strong",     "format:toggle-span:b|strong");    
  bind("button.span li.em",         "format:toggle-span:i|em");
  bind("button.span li.underline",  "format:toggle-span:u");
  bind("button.span li.del",        "format:toggle-span:del|s|strike");
  bind("button.span li.sub",        "format:toggle-span:sub");
  bind("button.span li.sup",        "format:toggle-span:sup");
  bind("button.span li.mark.a",     "format:apply-span:mark",{"class":"a"});
  bind("button.span li.mark.b",     "format:apply-span:mark",{"class":"b"});
  bind("button.span li.mark.c",     "format:apply-span:mark",{"class":"c"});
                               
  bind("button.list-ul",       "format:toggle-list:ul");
  bind("button.list-ol",       "format:toggle-list:ol");
  bind("button.list-dir",      "format:toggle-list:dir");
  bind("button.list-dl",       "format:toggle-list:dl");
  bind("button.pre",           "format:toggle-pre");
  bind("button.blockquote",    "format:toggle-block:blockquote");
                             
  bind("button.unindent",      "format:unindent");
  bind("button.indent",        "format:indent");

  bind("button.paragraph li.p",   "format:morph-block:p");
  bind("button.paragraph li.div", "format:morph-block:div");
  bind("button.paragraph li.h1",  "format:morph-block:h1");
  bind("button.paragraph li.h2",  "format:morph-block:h2");
  bind("button.paragraph li.h3",  "format:morph-block:h3");
  bind("button.paragraph li.h4",  "format:morph-block:h4");
  bind("button.paragraph li.h5",  "format:morph-block:h5");
    
  /*bind("button.font-size li:nth-child(1)", "format:apply-span:font", {size:1});
  bind("button.font-size li:nth-child(2)", "format:apply-span:font", {size:2});
  bind("button.font-size li:nth-child(3)", "format:apply-span:font", {size:3});
  bind("button.font-size li:nth-child(4)", "format:apply-span:font", {size:4});
  bind("button.font-size li:nth-child(5)", "format:apply-span:font", {size:5});
  bind("button.font-size li:nth-child(6)", "format:apply-span:font", {size:6});
  bind("button.font-size li:nth-child(7)", "format:apply-span:font", {size:7});*/
  
  //bind("button.picture", this.onInsertPicture);    
  //SetupTableSelector(this.toolbar.$(button.table));    

  bind("button.link",  function(cmd,param,btn) {
    if( cmd == #query ) { 
      if(this.queryCommand("format:remove-span:a") != DISABLED) {
        // we have <a> element already, so repurpose this button for link removal
        btn.attributes.addClass("unlink");
        btn.attributes["title"] = "Remove link";
        return AVAILABLE;
      } else {
        //  no <a> in selection so this will add link
        btn.attributes.removeClass("unlink");
        btn.attributes["title"] = "Add link";
        return AVAILABLE;
      }
    }
    if( cmd == #exec ) { 
      if( btn.$is(.unlink) ) 
        this.execCommand("format:remove-span:a");
      else
        this.execCommand("insert-link");
    }
  });

  bind("button.image",  function(cmd,param,btn) {
    if( cmd == #query ) { 
      if(this.queryCommand("edit:insert-html") != DISABLED)
        return AVAILABLE;
    }
    if( cmd == #exec ) { 
      var pics = showInsertPictureDialog();
      var html = "";
      if( typeof pics == #array ) {
        for(var pic in pics)
          html += "<img src='" + pic + "'/>";
      } else if( typeof pics == #string ) {
          html += "<img src='" + pics + "'/>";
      } else 
        return true;
      //stdout.println("html",html);        
      this.execCommand("edit:insert-html",html);
      return true;
    }
  });


  noteview.htmlarea << event statechange { notifyObservers(); }
  noteview.htmlarea << event change { notifyObservers(); }

  const activatorsMenu = toolbar.$(button.activators>menu);
  Activators.setupActivatorsMenu(activatorsMenu);

  activatorsMenu << event click $(li) {
    return Activators.handleMenuClick(this,noteview.htmlarea);
  }



}