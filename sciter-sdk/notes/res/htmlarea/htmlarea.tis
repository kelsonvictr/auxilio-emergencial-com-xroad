
include "canonicalize-dom.tis";
include "../libs/dom.tis";
include "magicsequences.tis";
include "shortcuts.tis";
include "htmlarea-ext-css.tis";
include "htmlarea-merge.tis";
include "activators/activators.tis";

const PREVIEW_WIDTH = 80;
const PREVIEW_HEIGHT = 80;

function previewImageOf(doc)
{
  var body = doc.$(body) || doc;
  var (px1,py1,px2,py2) = body.box(#rect,#border,#inner)
  var w = Integer.min(px1 + px2 + body.intrinsicWidthMax(),doc.toPixels(800dip,#width));
  var h = body.intrinsicHeight(w).limit(32, doc.toPixels(1000dip,#height));
  var pvh = Integer.min(PREVIEW_HEIGHT, PREVIEW_WIDTH * h / w );
  return new Image(w, h, PREVIEW_WIDTH, pvh, body); // make snapshot of the body
}

class HtmlArea: Element 
{
  this var changed = false;
  this var note = null;
  this var isNew = true;
  this var isBlank = false;
  this var activators = {}; // activator classes map, to trace activators state 
 
  function attached() {
    //???? setupKeyboardShortcutsOn(this);
  }

  function loadBlank() {
    //this.loadBlank(); 
    this.isBlank = true;
    this.loadDocument(this.url("htmlarea/htmlarea-blank.htm"));
    this.activators = {};
  }

  event pastehtml (evt) {
    const params = {};
    var docRoot = evt.source; // DOM element that usually contains: <html>,<body>,
    var fromUrl = evt.data.url; // behavior:richtext passes {url:...} object with meta data 
    var (generatorFromDom, title) = canonicalizeDOM(docRoot,params);
    var generator = evt.data.generator || generatorFromDom;

    if( this.isNew ) {
      this.sourceUrl = fromUrl;
      this.sourceGenerator = generator;
      this.sourceTitle = title;      
    }
    this.requestSave(20ms);
    // do not consume the event so it will be pasted
  } 

  event change (evt) {
    this.changed = true;
    this.isBlank = false;
    this.requestSave(1s);

    const CHANGE_BY_INS_CHAR = 0;  // single char insertion
    const CHANGE_BY_INS_CHARS = 1; // character range insertion, clipboard
    const CHANGE_BY_DEL_CHAR = 2;  // single char deletion
    const CHANGE_BY_DEL_CHARS = 3; // character range deletion (selection)
    const CHANGE_BY_UNDO_REDO = 4;
    const CHANGE_BY_INS_CONSECUTIVE_CHAR = 5; // single char insertion, previous character was inserted in previous position  
    const CHANGE_BY_CODE = 6; 

    if( this.selection.caret && (evt.reason == CHANGE_BY_INS_CONSECUTIVE_CHAR || evt.reason == CHANGE_BY_INS_CHAR))
      Sequences.check(this,this.selection.caret);

    if( this.note )
      this.postEvent("note-content-changed", this.note); // by the user
  }

  function onRequest(rq) 
  {
    if( this.note ) {
      var (data,mime) = this.note.getResource(rq.requestUrl);
      if( data ) {
        // fulfill the request by the data
        rq.fulfill(data,mime);
      }
    }
  }

  // data request ended
  function onRequestResponse(rq) 
  {
    if(rq.isSucceeded && rq.requestDataType == Request.DATA_IMAGE) {
      this.checkNote();
      if(rq.requestUrl !like "data:*") 
        this.note.addResource(rq.requestUrl, rq.responseMimeType, rq.responseData);
      //if( rq.responseMimeType like "image/*" )
      Tag.known("image",true).addItem(this.note);
    }
  }

  function requestSave(delay = 20ms) {
    this.timer(delay, this.saveNote ); // throttle saving
  }
 
  property document(v) {
    get return this[0];
  }
  property body(v) {
    get return this[0].$(body) || this[0];
  }

  // trying to classify source by url this not was created from 
  function postProcessPasting() {

     switch(this.sourceGenerator) 
     {
       like "Microsoft Word *": Tag.known("word",true).addItem(this.note); return;  
       like "Microsoft Excel *": Tag.known("excel",true).addItem(this.note); return; 
     }

     this.sourceGenerator = null;

     // no luck with the generator, try source url
     if( this.sourceUrl ) {
       switch(this.sourceUrl) {
          like "http://*":
          like "https://*": { 
             Tag.known("web",true).addItem(this.note); 
             var domain = URL.parse(this.sourceUrl).hostname;
             this.appendHtml("<p|urlfrom><a href='" + this.sourceUrl + "'>" + domain + "</a></p>");
             this.note.setMeta{ urlFrom: this.sourceUrl };
             break;
           }
          like "file://*.doc": 
          like "file://*.docx": Tag.known("word",true).addItem(this.note); break;
          like "file://*.xls": 
          like "file://*.xlsx": Tag.known("excel",true).addItem(this.note); break;
          //default: 
          //  stdout.println("paste", generator, url );
       } 
       this.sourceUrl = null;
     }

     if(this.sourceTitle) 
     {
       // if note text does not contain h1,h2 then we are generating h1 from <head><title>
       if(!this.body.$(h1,h2))
         this.body.$prepend(<h1>{this.sourceTitle}</h1>);
       this.sourceTitle = null;
     }
  }

  function appendHtml(html) {
    var body = this.body;
    function insertIt(transaction) 
    {
      // 'this' here is an htmlarea
      var pos = [bookmark:body,body.lastNode.nodeIndex,true]; //insertion point at the end of body - will be inserted as last element;
      var insertedNodes = transaction.insertHtml(pos, html);  // insert the html at pos
      var table = insertedNodes[0];
      var firstTextPos = insertedNodes.first.firstCaretPos;
      var lastTextPos = insertedNodes.last.lastCaretPos;
      this.state.focus = true;
      this.selection.select(firstTextPos,lastTextPos); // move caret to pos
      return true;
    }
    this.transact(insertIt,"insert url"); // do the action inside undoable transaction.    
  }

  // static method
  function tableHtml(cols,rows,headerCols=0,headerRows=0,autoWidth = true) {
    if( !rows || !cols )
       return "";
    const width = autoWidth ? "" : "width=100%";
    var table = "<table "+ width +"><tbody>";
    for( var r in rows ) {
      table += "<tr>";
      if( r < headerRows )  
        for( var c in cols )
          table += "<th></th>";
      else
        for( var c in cols ) 
          table += c < headerCols ? "<th></th>" : "<td></td>";
      table += "</tr>\r\n";
     }
     table += "</tbody></table>";
     return table;
  }

  event exec:insert-table (evt) 
  {
    const params = evt.data; 
    const rows = params.rows;       assert rows;
    const columns = params.columns; assert columns;
    const autoWidth = params.autoWidth || true;
    const columnHeaders = params.columnHeaders || 0;
    const rowHeaders = params.rowHeaders || 0;

    //const border = params.border ? "border" : "";    
    var html = tableHtml(columns, rows, columnHeaders, rowHeaders, autoWidth);
    
    function insertIt(transaction) {
      // 'this' here is the htmlarea
      var pos = transaction.removeRange();                    // delete selection if any
      var container = DOM.blocksContainerOf(pos[0]);          // get container that can hold the <table>
      pos = transaction.split(pos,container);                 // split the pos until the container
      var insertedNodes = transaction.insertHtml(pos, html);  // insert the html at pos
      assert insertedNodes.length && insertedNodes[0].tag == "table";
      var table = insertedNodes[0];
      var firstTextPos = table.$(td).firstCaretPos;
      this.state.focus = true;
      this.selection.select(firstTextPos);                    // move caret to pos
      return true;
    }
    this.transact(insertIt,"insert table"); // do the action inside undoable transaction.
  }

  function highlightWords(words) {

      const clearMark = Selection.clearMark;
      const applyMark = Selection.applyMark;

      if( !words ) 
        clearMark(this.body);
      else 
        for(var node in DOM.eachNodeIn(this.body))
        {
          if( !node.isText ) continue;
          var text = node.text.toLowerCase();
          clearMark(node);
          for(var (index,word) in words) {       
            var pos = text.indexOf(word);
            if( pos < 0 ) continue;
            var bookmarkStart = [bookmark:node, pos, false];
            var bookmarkEnd = [bookmark:node, pos + word.length, false];
            applyMark(bookmarkStart,bookmarkEnd,"found" + index);
          }
        } 
  }


  function checkNote() {
    if( !this.note ) {
       this.note = this.parent.provideNote();
       this.setDocumentUrl("note:" + this.note.id);
       this.postProcessPasting();
       return true;
    }
    return false;
  }

  function saveNote() {
    if( !this.changed /* || !this.note*/) 
      return false;

    var isNew = this.checkNote();

    var text = this.text;
    var html = this.saveDocument(); // to instanceof Bytes
    
    var caption = DOM.caption(this.document);

    var previewImage = previewImageOf(this.document);
    this.note.update { 
      html:html, 
      text:text, 
      caption: caption, 
      preview: previewImage.toBytes() 
    };
    previewImage.destroy();

    for(var (activator, dummy) in this.activators)
      activator.onSaveNote(this,this.note);

    return true;
  }

  function loadNote(note) {
    this.loading = true;
    this.activators = {};    
    this.save();
    this.note = note;
    if( note ) {
      this.isNew = false;
      this.isBlank = false;
      var url = "note:" + note.id;
      if(note.history)
        this.loadWithHistory(note, url);
      else
        this.loadDocument(note.html, url);
      this.document.state.readonly = this.state.readonly;
      if( filterWords ) this.highlightWords(filterWords);
    }
    else {
      this.isNew = true;
      this.isBlank = true;
      this.loadBlank();
      this.document.state.readonly = false;
    }
    this.loading = false;
  }

  function loadWithHistory(note,url) {

    for(var (i,hr) in note.history) {
      if(!hr.html) continue;
      if(i == 0)
        this.loadDocument(hr.html,url);
      else { // show merge
        function callback(op,...args) { Merge.mutator(hr,op,args); }
        var otherdoc = this.parseHtml(hr.html);
        var thisdoc = this[0];
        thisdoc.$(body).merge(otherdoc.$(body),callback,#only-children);
      }
    }
    
    function callback(op,...args) { Merge.mutator(note,op,args); }
    var otherdoc = this.parseHtml(note.html);
    var thisdoc = this[0];
    thisdoc.$(body).merge(otherdoc.$(body),callback,#only-children);
  }

  function mergeFrom(otherNote) {

    //debug merging: otherNote;

    function callback(op, ...args) { Merge.mutator(otherNote,op,args); }

    function exec(transaction) 
    {
      transaction.merge(otherNote.html, callback);
      return true;
    }
    this.transact(exec,"merge"); // do the action inside undoable transaction.
    return true; 
  }

  
  // obsolete:
  function saveNoteTo(fileName) {
    return this.saveDocument(fileName);
  }

  function registerActivator(activator, attached) 
  {
    this.activators[activator] = true;
  }

  property disableHyperlinkClick(v) {
    get return !this.state.readonly;
  }
 
  /* moved to navigate.tis
  event ~click $(a[href]) (evt) {
     const url = evt.target.attributes["href"];
     if( url && this.state.readonly ) {
       Sciter.launch(url);
       return true;
     }
  }*/

  event contextmenu $(a[href]) (evt, a) {
     const url = a.attributes["href"];
     if( url && !this.state.readonly ) {
       evt.source = this.linkDialog(a);
       return true;
     }
  }


  function linkDialog(forElement) 
  {
    var dialog = loadDialog(__FOLDER__ + "link-dialog.htm");
    var htmlarea = this;

    if(forElement) 
    {
      var url = forElement.attributes["href"]; 
      var text = forElement.text;

      function doUpdate(fields) {

        function exec(transaction) 
        {
          if( fields.url != url )
            transaction.attr("href", fields.url);
          if( fields.text != text )
            transaction.text(forElement, fields.text);
          this.selection.select(forElement); 
          return true;
        }
        htmlarea.transact(exec,"update link"); // do the action inside undoable transaction.
        return true; 
      }      
      dialog.showFor 
      {
        element: forElement,
        url:url,
        text:text,
        update: doUpdate
      };

    } else {
      var (x,y,w,h) = htmlarea.box(#rectw,#caret,#view);
      var onSelection = !htmlarea.selection.isCollapsed;
      function doInsert(fields) {
         if( onSelection ) 
           htmlarea.execCommand("format:apply-span:a", { href: fields.url.trim() });
         else 
           htmlarea.execCommand("edit:insert-html", " <a href='"+ fields.url.trim() +"'>"+ fields.text +"</a> ");
         return true; 
      }

      dialog.showWith 
      {
        x: x,
        y: y + h,
        onSelection: onSelection,
        insert: doInsert
      };
    }
    return dialog;
  }

  event exec:insert-link (evt) {
     this.linkDialog(null);  
     return true;
  }



}

// used for note previews or for importing notes from files, applied to <frame>
class NoteFrame : Element 
{
  this var activators = {}; // activator classes map, to trace activators state 
  
  var inlineCss;

  // the document has issued data request
  function onRequest(rq) 
  {
    if( this.note ) {
      var (data,mime) = this.note.getResource(rq.requestUrl);
      if( data ) {
        // fulfill the request by the data
        rq.fulfill(data,mime);
      }
    }
  }

  property document(v) {
    get return this.first;
  }
  property body(v) {
    get return this.first.$(body) || this.first;
  }

  function loadNote(n) {
    this.loading = true;    
    if( this.note = n ) this.loadDocument(n.html, "note:" + n.id);
    this.loading = false;    
  }

  // saves note to file with images inline
  function saveNoteToFile(n,pathname) 
  {
    if( this.note = n ) this.loadDocument(n.html, "note:" + n.id);
    
    for(var img in this.document.$$(picture[src],img[src]))
    {
      var src = img.attributes["src"];
      var (data,mime) = this.note.getResource(src);
      var dataUrl = String.printf("data:%s;src=%s;base64,%s",mime, src.urlEscape(),data.toString());
      img.attributes["src"] = dataUrl;
    }

    var tags = this.note.tags.map( :tag: tag.name ).join(",");

    var head = this.document.$(head);
    if( head ) head.remove();

    this.note.cdate = this.note.cdate || new Date();
    this.note.mdate = this.note.mdate || new Date();

    this.document.$prepend(<head>
      <title>{this.note.caption}</title>
      <meta name="note-id" content="{this.note.id}" />
      <meta name="note-cdate" content="{this.note.cdate.toISOString(true)}" />
      <meta name="note-mdate" content="{this.note.mdate.toISOString(true)}" />
      <meta name="note-created-by" content="{this.note.createdBy}" />
      <meta name="note-modified-by" content="{this.note.modifiedBy}" />
      <meta name="note-book" content="{this.note.book.name}" />
      <meta name="note-tags" content="{tags}" />
      <style>{INLINE_CSS}</style>
    </head>);

    this.saveDocument(pathname);
  }


  // loads note from file and stores it in DB
  // function conflictResolver(existingNote, importingNote) returns:
  //   #update - but keep changes history
  //   #discard - discard changes as we have more recent changes
  //   #merge - TODO
  function createNoteFromFile(pathOrBytes, params = {}) 
  {
    var note = null;
    var doc = null;
    var generator = null;

    function crackDataUrl(durl) {
      var head = durl ~/ ",";
      var data = durl ~% ",";

      data = Bytes.fromString(data);
      assert data instanceof Bytes;
     
      if(data !instanceof Bytes) 
        return durl;

      var heads = head.split(";");
      var mimetype;
      var src = "cid:" + data.md5(); // default src 

      if( heads.last != "base64" )
         return durl; // not a base64 ?
      if(heads.length == 2) 
        mimetype = heads[0]; 
      else if(heads.length >= 3) {
        mimetype = heads[0]; 
        if((heads[1] ~/ "=") == "src")
          src = (heads[1] ~% "=").urlUnescape();
      } else
        return durl;

      note.addResource(src, mimetype, data);
      Tag.known("image",true).addItem(note);
      return src;
    }

    function processDataUrls(doc) // make relative URLS
    {
      for( var el in doc.$$([src^="data:"]) ) 
        el.attributes["src"] = crackDataUrl(el.attributes["src"]);
    }

    var noteId;
    var noteCaption;
    var noteCDate;
    var noteMDate;
    var noteBook; // name
    var noteTags; // comma separated list
    var noteCWho; 
    var noteMWho; 

    function processNote(evt)
    {
      this.note = note = new Note();
      doc = evt.target;

      noteId = params.id || DOM.getMeta(doc,"note-id") || note.id; 
      noteCDate = params.cdate || Date.parse(DOM.getMeta(doc,"note-cdate"), note.cdate);
      noteMDate = params.mdate || Date.parse(DOM.getMeta(doc,"note-mdate"), note.mdate); 
      noteCWho =  DOM.getMeta(doc,"note-created-by") || note.createdBy;
      noteMWho =  DOM.getMeta(doc,"note-modified-by") || note.modifiedBy;

      noteCaption = DOM.getTitle(doc);

      noteBook = DOM.getMeta(doc,"note-book") || db.defaultBook().name;
      noteTags = DOM.getMeta(doc,"note-tags"); 

      generator = canonicalizeDOM(doc,{});
      processDataUrls(doc);
    }

    this.on("parsed",processNote);

    var action;

    if(this.loadDocument(pathOrBytes) && note) 
    {
      note.id = noteId; 
      note.cdate = noteCDate;
      note.mdate = noteMDate; 
      note.createdBy = noteCWho;
      note.modifiedBy = noteMWho;

      var text = this.text;
      var html = this.saveDocument(); // to Bytes

      var caption = DOM.caption(doc);

      note.html = html;
      note.text = text;
      note.caption = caption;

      var book = params.book || db.getBookByName(noteBook,true);
      var tags = noteTags.split(",").filter(:nt:!!nt).map(:tn: db.getTagByName(tn,true));

      (note,action) = db.importItem(note,book,tags);

      // TODO: reload if updated to get proper preview
      var previewImage = previewImageOf(doc);
      note.preview = previewImage.toBytes();
      previewImage.destroy();
    }
    this.off(processNote);
    return (note,action);
  }


  function registerActivator(activator, attached) 
  {
    this.activators[activator] = true;
  }

}



