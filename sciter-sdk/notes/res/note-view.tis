include "db/note.tis";
include "htmlarea/toolbar.tis";
include "books-view.tis";
include "libs/utils.tis";

// Note view - represents single note

class NoteView : Element 
{
  this var note = undefined;
  this var htmlarea = null;
  this var toolbar = null;
  //this var footer = null;
  this var keywords = null; // keywords list 
  //this var history = null;
  this var bookSelector = null;

  var current = null;

  function attached() 
  {
    current = this;

    this.htmlarea = this.$(htmlarea);
    this.toolbar = this.$(toolbar);
    //this.history = this.$(select.history);
    this.tags = this.$(tags);
    this.bookSelector = this.$(select.book);

    var me = this;
    /*self << event show-note (evt)      { me.showNote(evt.data); }*/
    /*self << event start-new-note (evt) { me.showNote(null);
                                         if(evt.data == #from-clipboard) {
                                           me.htmlarea.state.focus = true;
                                           me.htmlarea.execCommand("edit:paste");
                                         }
                                       }*/
    self << event note-lock-changed() { me.updateState(); }
    self << event note-created()      { me.updateState(); }
    self << event note-updated()      { me.updateState(); }
    //self << event note-history()      { me.updateState(); }
    self << event note-history-changed (evt) { if(this.note === evt.data) me.updateState(); }
    //self << event note-merge (evt) { if(this.note === evt.data) me.updateState(); }

    self << event note-book-changed() { me.populateBooks(); }

    self << event book-changed() { me.populateBooks(); }
    self << event book-created() { me.populateBooks(); }
    self << event book-removed() { me.populateBooks(); }
    self << event book-updated() { me.populateBooks(); }

    self << event book-selected() { 
      if(!me.note && currentBook !== db.getDeletedBook() )
        me.bookSelector.value = (currentBook ? currentBook : db.defaultBook()).id; 
    }

    self << event notes-filter-changed (evt) {
      if(evt.data == #words)
        me.htmlarea.highlightWords(filterWords);
    }

    self << event shutdown {
      me.htmlarea.saveNote();
      db.commit();
    }

    this.populateBooks(); 
    EditingToolbar(this, this.$(band.editing));

  }

  // gets the note, ensures that note exists
  /*function presentNote(note, htmlarea ) 
  {
    if( !note && !htmlarea && this.htmlarea.attributes.exists("initial") )
      htmlarea = this.htmlarea;
    else {
      if(this.note && this.htmlarea.saveNote())
        db.commit();
      this.htmlarea.detach();
      if( !htmlarea )
        htmlarea = Element.create(<htmlarea content-style="htmlarea/htmlarea.css"/>);
      this.insert(htmlarea,1);
      this.htmlarea = htmlarea;
    }
    this.showNote(note);
    return htmlarea; // returns newly created htmlarea
  }*/

  function presentNote(note) 
  {
    if(this.note && this.htmlarea.saveNote())
      db.commit();
    this.showNote(note);
  }
  

  function provideNote() 
  {
    if(!this.note) {
      this.note = new Note();
      db.addItem(this.note);
      var book = db.getBook(this.bookSelector.value);
      book.addItem(this.note);
      currentNote = this.note;
      self.postEvent("note-new-created", this.note);
    }
    return this.note;
  }

  function showNote(note) {
    currentNote = note;
    if(this.note !== note) {
      this.note = note;
      if( note && (note.lock === undefined))
          note.lock = true; // user did not express desire to lock it - lock it by default
      this.htmlarea.loadNote(note);
      this.tags.loadNote(note);
      this.postEvent("note-shown",note);
    }
    this.updateState();    
    this.bookSelector.value = note ? note.book.id : db.defaultBook().id;
    if(!this.note /* || !this.note.lock*/) 
      this.post( () => this.htmlarea.state.focus = true );

  }

  function populateBooks() {
    var books = db.getBooks();
    var options = this.bookSelector.options;
    options.clear();

    var fmt = BookView.bookBriefHtml;

    for( var book in books )
      options.append(fmt(book));
    
    if(this.note)
      this.bookSelector.value = this.note.book.id;
  }

  function updateState() {
    if( this.note ) {
      this.toolbar.$(button.edit).state.disabled = false;
      this.toolbar.$(button.save).state.disabled = false;
      this.toolbar.$(button.anchor).state.disabled = false;
      this.toolbar.$(button.print).state.disabled = !platformSupportsPrinting;
      this.toolbar.attributes["mode"] = this.note.lock ? "viewing" : "editing";
      this.htmlarea.state.readonly = !!this.note.lock; 
      this.htmlarea.document.state.readonly = !!this.note.lock; 
      if(this.note.lock) {
        var viewingBand = this.toolbar.$(band.viewing);
        viewingBand.value = {
          cdate: this.note.cdate,
          mdate: this.note.mdate,
          cwhom: this.note.createdBy,
          mwhom: this.note.modifiedBy,
        }
        if(this.note.mdate && this.note.cdate)
          viewingBand.attributes.toggleClass("note-not-modified", sameDay(this.note.mdate,this.note.cdate));
        viewingBand.attributes.toggleClass("note-created-by-me", this.note.createdBy == PRINCIPAL);
        viewingBand.attributes.toggleClass("note-modified-by-me", this.note.modifiedBy == PRINCIPAL);
      }

      /*this.history.options.clear();
      if( this.note.history ) {
        this.history.options.$append(<option value='-1'>Latest</option>);
        for(var (idx,hi) in this.note.history) {
          if( hi.mwho == PRINCIPAL )
            this.history.options.$append(<option value={idx}>{hi.mdate.toLocaleString()}</option>);
          else
            this.history.options.$append(<option value={idx}>{hi.mdate.toLocaleString()} by {hi.mwho}</option>);
        }
        this.history.value = -1;
      }*/

    } else {
      this.toolbar.$(button.edit).state.disabled = true;
      this.toolbar.$(button.save).state.disabled = true;   
      this.toolbar.$(button.anchor).state.disabled = true;   
      this.toolbar.$(button.print).state.disabled = true;
      this.toolbar.attributes["mode"] = "editing";
      this.htmlarea.state.readonly = false;
      this.htmlarea.document.state.readonly = false; 
      //this.history.options.clear();
    }
  }

  function mergeNote( other, how ) {
    if( how == #theirs-on-top ) {
      // changes that appeared later than our modifications
      this.htmlarea.mergeFrom(other);
      return true;
    }
    return false;
  }

  event click $(button.edit) (evt, button) { 
    if( this.note ) {
      this.note.setLock( !this.note.lock );
      return true;
    }
  }

  event click $(button#export-note) (evt, button) { 

    this.htmlarea.saveNote();

    function safeToFileName(fn) { return fn.replace(/[\\\/\:\*\?\"<>|]/g," "); }

    const filter = "HTML Files (*.htm,*.html)|*.htm;*.html|All Files (*.*)|*.*";
    const defaultExt = "html";
    const initialPath = System.path(#USER_DOCUMENTS,safeToFileName(this.note.caption) + ".html");
    const caption = "Select file to save note";
  
    var fn = view.selectFile(#save, filter, defaultExt, initialPath, caption );
    if( fn )
       exportNote(this.note,fn);
    return true;
  }

  event click $(button#import-note) (evt, button) { 

    const filter = "HTML Files (*.htm,*.html)|*.htm;*.html|All Files (*.*)|*.*";
    const defaultExt = "html";
    const initialPath = System.path(#USER_DOCUMENTS,"/");
    const caption = "Select note files to load";
  
    var fn = view.selectFile(#open-multiple, filter, defaultExt, initialPath, caption );
    if( fn )
       importNotes(fn);
    return true;
  }

  event click $(button#hyperlink-note) {
    var data = this.note.dataForClipboard();
    view.clipboard(#put, data);
    return true;
  }

  event change $(select.book) (evt) { 
    if( this.note ) {
      var book = db.getBook(evt.target.value);
      book.addItem(this.note);
    }
  }

}

