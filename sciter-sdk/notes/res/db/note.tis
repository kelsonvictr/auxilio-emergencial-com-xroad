//|
//| Item is a note that could be of various types 
//|

include "../libs/utils.tis";

class Note 
{
  this var id = null;
  this var cdate = null;
  this var mdate = null;  
  this var kind = null;
  this var book = null;  
  this var tags = [];  
  this var html = null;
  this var text = null;
  this var caption = null;
  this var resources = null;
  this var lock = undefined;
  this var preview = null; // review image bytes
  this var cwho; // created by whom    
  this var mwho; // modified by whom    
  this var meta; // various metadata : 
                 // { 
                 //   urlFrom : ...pasted from this url ... 
                 // } 
  this var history; // history records, array of 
                 // { mdate: Date, 
                 //   mwho: String - whos version is that
                 //   html: Bytes - content }

  function this(itemKind = "html") {
    var date = new Date();
    this.id = String.UID();
    this.cdate = date;
    this.mdate = date;  
    this.kind = itemKind;
    this.cwho = PRINCIPAL;
//    this.tags = [];  
//    this.html = null;
//    this.text = null;
//    this.caption = null;
//    this.shortText = null;    
//    this.resources = null;
//    this.lock = undefined;    
  }

  /*function setContent(html, text, caption, preview) 
  {
    this.html = html;
    this.text = text;
    this.caption = caption;
    this.preview = preview;
    this.mdate = new Date();  
    this.mwho = PRINCIPAL;  
    
    self.postEvent("note-updated",this);    
  }*/

  static function get(id) {
    return db.getItem(id);
  }


  function update(props) 
  {
    // use with care - no check for field names!
    var changes = false;
    var contentChanges = false;
    for(var (key,val) in props) 
      if( this[key] != val ) {
        changes = true;
        if(key == #html)
          contentChanges = true;
      }
    
    if(!changes)
      return;

    var now = new Date();      
    this.mdate = now;
    this.mwho = PRINCIPAL; 
    self.postEvent("note-updated",this);    

    if(contentChanges) {
      if((daysBetween(this.mdate,now) >= 1) || (this.mwho != PRINCIPAL))
        this.pushToHistory(this);
    }

    for(var (key,val) in props)
      this[key] = val;
  }  

  function setMeta(params) 
  {
    var changes = false;
    if( !this.meta ) this.meta = {};
    for(var (key,val) in params) {
      if( this.meta[key] != val ) {
        this.meta[key] = val;
        changes = true;
      }
    }
    if(changes) {
      this.mdate = new Date();
      this.mwho = PRINCIPAL;  
      //stdout.println("note-updated",this.text); 
      self.postEvent("note-updated",this);    
    }
  }  
  function getMeta(name) {
    return this.meta ? this.meta[name] : undefined;
  }


  function setLock(onOff) {
    if(this.lock !== onOff) {
      this.lock = onOff;
      self.postEvent("note-lock-changed", this);
    }
  }

  function addResource(url, mime, bytes)
  {
    if( !this.resources) 
      this.resources = {};
    this.resources[url] = [bytes,mime];
    //stdout.println("addResource", url, mime);
  }

  function getResource(url)
  {
    if( this.resources) {
      var r = this.resources[url];
      if( typeof r == #array )
        return (r[0],r[1]);
    }
    return (null,null);
  }

  function containsTags(tags) {
    var thistags = this.tags;
    if( !thistags )
      return false;
    if( typeof tags == #array ) {
      for( var t in tags)
        if( t !in thistags) 
            return false;
    } else if( tags !in thistags) 
            return false;
    return true;
  }

  function matches(tags,words,book) {
    if( tags && !this.containsTags(tags)) return false;
    if( book ) {
      if(this.book !== book) 
        return false;
    } else { // !book
       if( this.book.isDeleted ) // we are not showing notes from deleted book for "all notes"
         return false;  
    }
    if( words ) {
      var text = (this.text || "").toLowerCase();
      for(var word in words) 
        if(word && (text.indexOf(word) < 0))
          return false;
    }
    return true;
  }

  function addTag(tag) { return db.assignTagToItem(this,tag); }

  function removeTag(tag) { return db.removeTagFromItem(this,tag); }

  function getCustomTags() {
    var r = this.tags.filter(:tag: tag.isCustom);
    return r;
  }

  function getTags() {
    return this.tags;
  }

  property createdBy(v) {
    get return this.cwho || PRINCIPAL;
    set this.cwho = v;
  }

  property modifiedBy(v) {
    get return this.mwho || this.cwho || PRINCIPAL;
    set this.mwho = v;
  }

  function pushToHistory(from)
  {
    if(!this.history) 
      this.history = [];

    if( this.history.last && this.history.last.html == from.html)
      return false;

    self.postEvent("note-history-changed",this);

    // collapse all changes that happened in one day
    if( var last = this.history.last ) {
      if(last.mwho == from.modifiedBy && daysBetween(last.mdate,from.mdate) < 1) 
      last.mdate = from.mdate;
      last.html = from.html;
      return true;
    }

    this.history.push {
      mdate: from.mdate,
      mwho: from.modifiedBy,
      html: from.html;
    };
    if(this.history.length > 8) // we keep only this number of history items
      this.history.shift();

    return true;
  }

  function mergeContent(other, how) {
    //debug log: currentNote === this, currentNote, this;
    if( currentNote === this ) {
      // do it visually
      if(NoteView.current.mergeNote(other, how))
        return true;
    }
    // how: #their-on-top or #ours-on-top
    if( how == #theirs-on-top ) {
      if(!this.pushToHistory(this))
        return false;
      this.mdate = other.mdate;
      this.mwho = other.modifiedBy;
      this.html = other.html;
    }
    else if( how == #ours-on-top ) 
      if(!this.pushToHistory(other))
        return false;
    return true;        
  }

  // events is an array 
  // [{ date: Date, warn: Date [, end: Date] }, ... ]
  function setEvents( events ) 
  {
    if( events && (events.length == 0)) 
      events = null;
    this.setMeta({events:events}); 
    if( events ) {
      this.addTag(Tag.known("event",true));
      self.postEvent("events-changed",true);
    }
    else {
      this.removeTag(Tag.known("event",true));
      self.postEvent("events-changed",false);
    }
  }

  property startDate( v ) {
    get {
      var events = this.getMeta(#events);
      if(!events || events.length == 0)
        return null;
      return events[0].start;
    }    
  }

  property endDate( v ) 
  {
    get {
      var events = this.getMeta(#events);
      if(!events)
        return null;
      var max = null;
      for(var edef in events) {
        var e = edef.end;
        if( !max || e > max ) 
          max = e;
      }
      return max;
    }
  }

  property activeStartDate(v) {
    get {
      var events = this.getMeta(#events);
      if(!events)
        return null;
      var now = new Date();
      for(var edef in events) {
        if( edef.end < now ) continue; // ended already
          return edef.start;
      }
      return null;
    }
  }

  // true if note contains active event (the one that has warn date < now)
  property hasActiveEvent(v) {
    get {
      var dt = this.activeStartDate;
      return dt && (dt <= (new Date()));
    }
  }

  // move the note to the deleted book
  function moveToDeletedBook() {
    var delBook = db.getDeletedBook();
    db.assignItemToBook(this, delBook);
  }

  function dataForClipboard() {
    return { 
      json: { noteid: this.id },
      html: String.$( <a href="note:{this.id}">{this.caption}</a> ),
      text: String.$([{this.caption}](note:{this.id}));
    }
  }

  
}