
function Hamburger(params={}) 
{
 
  const burger = [[ 0.0 , 0.0, 1.0 , 0.0 ],
                  [ 0.0 , 0.5, 1.0 , 0.5 ],
                  [ 0.0 , 1.0, 1.0 , 1.0 ]];

  const arrow =  [[ 0.5 , 0.0, 1.0 , 0.5 ],
                  [ 0.0 , 0.5, 1.0 , 0.5 ],
                  [ 0.5 , 1.0, 1.0 , 0.5 ]];
                  
  const strokeWidth = this.toPixels( this.style#stroke-width, #width ) || 3;
  const strokeColor = this.style#stroke;
  
  const duration = params.duration || 400ms; 

  const container = this.$p(aside,section);
  
  var r = 0.0; // ratio : 0.0 - burger, 1.0 - arrow
  var b2a = undefined;
                  
  this.paintContent = function(gfx) 
  {
    if( b2a === undefined ) {
      b2a = container.state.collapsed;
      r = b2a ? 0.0 : 1.0;
    }

    var (w,h) = this.box(#dimension);
    gfx.strokeWidth(strokeWidth)
       .strokeCap(#round)
       .strokeColor(strokeColor);
       
    w -= strokeWidth;
    h -= strokeWidth;        
    
    gfx.translate(strokeWidth / 2.0, strokeWidth / 2.0);
    gfx.rotate( 0.5 * r * 1turn, w / 2, h / 2 );
    
    for(var n in 3) {
      var s = burger[n]; 
      var f = arrow[n];
      gfx.line( Float.morph(s[0],f[0],r) * w,
                Float.morph(s[1],f[1],r) * h,
                Float.morph(s[2],f[2],r) * w,
                Float.morph(s[3],f[3],r) * h);
    }
  }
  
  function step(progress) {
    r = b2a ? progress : (1 - progress);
    this.refresh();
  }

  this.toggle = function() {  
    if( container.state.collapsed ) {
      b2a = true;
      container.state.expanded = true;
      container.postEvent("expand");
    }
    else {
      b2a = false;
      container.state.collapsed = true;
      container.postEvent("collapse");
    }
    this.animate(step, duration);
  }

  this << event click() {  this.toggle(); return true; }


}