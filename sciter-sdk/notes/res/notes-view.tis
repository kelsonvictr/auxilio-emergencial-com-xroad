

include "libs/reactor/vlist.tis";


// that's representation of single note in the list
class ListNote : Reactor.Component
{
  this var note = null;
  this var isCurrent = false;

  function this(props) { 
    this.note = props.note;
    this.isCurrent = props.isCurrent; 
  }

  function render() {
    var note = this.note;
    var urlFrom = note.getMeta("urlFrom");

    var atts = { "book-color": (note.book.color || 0).toString(); };
    if( note.hasActiveEvent ) atts.class = "active-event";

    var text = urlFrom ? <text>from:<span.www>{URL.parse(urlFrom).hostname}</span></text>
                       : <text/>;

    var tags = note.tags.filter( tag => tag.isCustom && tag.color )
                        .map( tag => <tag color={tag.color}>{tag.name}</tag>);

    return <li {atts} :current={this.isCurrent} key={note.id}>
               <div><picture :value={note.preview} /><caption>{note.caption}</caption>{text}</div>
               <tags>{tags}</tags></li>;

  }

  event mousedragrequest {
    var data = this.note.dataForClipboard();
    var r = view.performDrag( this, data, #copy );
    return true;
  };


}


// NOTE: this component is instantiated as normal DOM element -
//       not by SSX, so we call super() ( VList.this() ) in attached()
//       rather than in its constructor.
//       Constructors are not called on subclassing
class NotesList : VList 
{
 
  function attached() 
  { 
    const renderItem = (note,index) => <ListNote note={note} isCurrent={ this.currentRecord === note } />; 
    
    super({ 
       recordset:this.notes,
       recordview:renderItem
    },[]);

    const updateList = (reset = false) => {
      var (records,indexToGo) = GetFilteredNotesSet();
      this.records = records;
      if( typeof indexToGo == #integer )
        this.post(:: this.scrollToRecord(indexToGo,false) );
    }
    const updateCurrent = (node) => this.current = node;
   
    self << event note-created { updateList() };
    self << event notes-filter-changed { updateList() };
    self << event book-selected  { updateList() };
    self << event book-updated { updateList() };
    self << event tag-updated { updateList() };
    self << event note-book-changed { updateList() };

    self << event show-note (evt) { updateCurrent(evt.data); }  
    self << event start-new-note (evt) { updateCurrent(null); } 
    self << event note-shown (evt) { updateCurrent(evt.data); }

    updateList();

  }

  event item-click {
    var note = this.currentRecord;
    Navigate.goTo(note);
    return true;
  }

  event tooltiprequest $(li) (evt,item) {
    // suppress tooltips 
    return true;
  }

}

class EventsKnob : Element 
{
  this var breathing; // animating

  function attached() 
  {
    var me = this;
    self << event events-status-changed (evt) { me.onEventsStatusChanged(evt.data); }
  }

  function onEventsStatusChanged(desc) {
    //desc is { startedEvents: int,  - num notes with just started events 
    //          activeEvents: int,  - active event notes with note.startDate < now < note.endNote
    //          totalEvents : int } - all pending events - with now < note.endNote including those in future
    
    //if( desc.startedEvents ) this.startHeartBeat();

    if( desc.totalEvents == 0 ) 
      this.clear();
    else if( desc.activeEvents )
      this.content(<span.active>{desc.activeEvents}</span>,
                   <span.total>{desc.totalEvents}</span>);
    else 
      this.content(<span.total>{desc.totalEvents}</span>);
  }

  /*function startHeartBeat() {
    if(this.breathing) return;
    this.breathing = 20; // # of cycles
    this.timer(1s,heartBeat);
  }*/

  // timer function
  /*function heartBeat() {
    if( --this.breathing == 0 )
      return false; // stop
    if( this.state.expanded ) this.state.expanded = false;
    else this.state.expanded = true;
    return true; // keep breathing
  }*/

  /*event click {
    this.breathing = 0;
    this.state.expanded = false;
  }*/

}